/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { WabFormSchema } from "./components/form-builder/wab-form-schema";
export { WabFormSchema } from "./components/form-builder/wab-form-schema";
export namespace Components {
    interface WabCheckboxInput {
        "checked": boolean;
        "details": string;
        "disabled": boolean;
        "errors": string;
        "label": string;
        "labelPosition": 'left' | 'right';
        "name": string;
        "readonly": boolean;
        /**
          * Use the native checkbox html element instead of the custom css one
         */
        "useNative": boolean;
        "value": string;
    }
    interface WabFormBuilder {
        "action": string;
        "getFormData": () => Promise<any>;
        "loading": boolean;
        "method": string;
        "schema": string | WabFormSchema;
        "useAjax": Boolean;
    }
    interface WabSelectInput {
    }
    interface WabTextInput {
        "details": string;
        "disabled": boolean;
        "errors": string;
        "label": string;
        "name": string;
        "placeholder": string;
        "readonly": boolean;
        "type": string;
        "value": string;
    }
}
export interface WabCheckboxInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLWabCheckboxInputElement;
}
export interface WabTextInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLWabTextInputElement;
}
declare global {
    interface HTMLWabCheckboxInputElementEventMap {
        "valueChange": string;
        "valueInput": string;
    }
    interface HTMLWabCheckboxInputElement extends Components.WabCheckboxInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLWabCheckboxInputElementEventMap>(type: K, listener: (this: HTMLWabCheckboxInputElement, ev: WabCheckboxInputCustomEvent<HTMLWabCheckboxInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLWabCheckboxInputElementEventMap>(type: K, listener: (this: HTMLWabCheckboxInputElement, ev: WabCheckboxInputCustomEvent<HTMLWabCheckboxInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLWabCheckboxInputElement: {
        prototype: HTMLWabCheckboxInputElement;
        new (): HTMLWabCheckboxInputElement;
    };
    interface HTMLWabFormBuilderElement extends Components.WabFormBuilder, HTMLStencilElement {
    }
    var HTMLWabFormBuilderElement: {
        prototype: HTMLWabFormBuilderElement;
        new (): HTMLWabFormBuilderElement;
    };
    interface HTMLWabSelectInputElement extends Components.WabSelectInput, HTMLStencilElement {
    }
    var HTMLWabSelectInputElement: {
        prototype: HTMLWabSelectInputElement;
        new (): HTMLWabSelectInputElement;
    };
    interface HTMLWabTextInputElementEventMap {
        "valueChange": string;
        "valueInput": string;
    }
    interface HTMLWabTextInputElement extends Components.WabTextInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLWabTextInputElementEventMap>(type: K, listener: (this: HTMLWabTextInputElement, ev: WabTextInputCustomEvent<HTMLWabTextInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLWabTextInputElementEventMap>(type: K, listener: (this: HTMLWabTextInputElement, ev: WabTextInputCustomEvent<HTMLWabTextInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLWabTextInputElement: {
        prototype: HTMLWabTextInputElement;
        new (): HTMLWabTextInputElement;
    };
    interface HTMLElementTagNameMap {
        "wab-checkbox-input": HTMLWabCheckboxInputElement;
        "wab-form-builder": HTMLWabFormBuilderElement;
        "wab-select-input": HTMLWabSelectInputElement;
        "wab-text-input": HTMLWabTextInputElement;
    }
}
declare namespace LocalJSX {
    interface WabCheckboxInput {
        "checked"?: boolean;
        "details"?: string;
        "disabled"?: boolean;
        "errors"?: string;
        "label"?: string;
        "labelPosition"?: 'left' | 'right';
        "name": string;
        /**
          * Fired when the value of the input changes, usually on change event
         */
        "onValueChange"?: (event: WabCheckboxInputCustomEvent<string>) => void;
        /**
          * Fired when the value of the input changes, usually on input event keyUp
         */
        "onValueInput"?: (event: WabCheckboxInputCustomEvent<string>) => void;
        "readonly"?: boolean;
        /**
          * Use the native checkbox html element instead of the custom css one
         */
        "useNative"?: boolean;
        "value"?: string;
    }
    interface WabFormBuilder {
        "action"?: string;
        "loading"?: boolean;
        "method"?: string;
        "schema"?: string | WabFormSchema;
        "useAjax"?: Boolean;
    }
    interface WabSelectInput {
    }
    interface WabTextInput {
        "details"?: string;
        "disabled"?: boolean;
        "errors"?: string;
        "label"?: string;
        "name": string;
        /**
          * Fired when the value of the input changes, usually on change event
         */
        "onValueChange"?: (event: WabTextInputCustomEvent<string>) => void;
        /**
          * Fired when the value of the input changes, usually on input event keyUp
         */
        "onValueInput"?: (event: WabTextInputCustomEvent<string>) => void;
        "placeholder"?: string;
        "readonly"?: boolean;
        "type"?: string;
        "value"?: string;
    }
    interface IntrinsicElements {
        "wab-checkbox-input": WabCheckboxInput;
        "wab-form-builder": WabFormBuilder;
        "wab-select-input": WabSelectInput;
        "wab-text-input": WabTextInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "wab-checkbox-input": LocalJSX.WabCheckboxInput & JSXBase.HTMLAttributes<HTMLWabCheckboxInputElement>;
            "wab-form-builder": LocalJSX.WabFormBuilder & JSXBase.HTMLAttributes<HTMLWabFormBuilderElement>;
            "wab-select-input": LocalJSX.WabSelectInput & JSXBase.HTMLAttributes<HTMLWabSelectInputElement>;
            "wab-text-input": LocalJSX.WabTextInput & JSXBase.HTMLAttributes<HTMLWabTextInputElement>;
        }
    }
}
