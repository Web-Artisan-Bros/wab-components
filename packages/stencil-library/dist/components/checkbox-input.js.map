{"file":"checkbox-input.js","mappings":";;;AAAA,MAAM,WAAW,GAAG,qaAAqa;;ACAzb,MAAM,gBAAgB,GAAG,gtCAAgtC;;MCS5tC,aAAa;;;;;;;uBACoB,KAAK;;wBAErB,KAAK;wBACL,KAAK;;;6BAGS,OAAO;;;yBAOpB,KAAK;;IAKlC,IAAI,EAAE;QACJ,OAAO,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAClC;IAED,mBAAmB,CAAE,CAAqB,EAAE,WAAoB;QAC9D,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAEnC,IAAI,WAAW,KAAK,QAAQ,EAAE;YAC5B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;SAC5C;aAAM;YACL,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;SAC3C;KACF;IAED,iBAAiB;;KAEhB;IAED,MAAM;QACJ,QACE,EAAC,IAAI,IAAC,KAAK,EAAC,kBAAkB,IAC5B,aAAO,IAAI,EAAC,OAAO,IAChB,IAAI,CAAC,aAAa,KAAK,MAAM,IAAI,YAAM,IAAI,EAAC,WAAW,IAAE,IAAI,CAAC,KAAK,CAAQ,EAE5E,aAAO,IAAI,EAAC,OAAO,EACZ,IAAI,EAAC,UAAU,EACf,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,EAAE,EAAE,IAAI,CAAC,EAAE,EACX,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,KAAK,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,SAAS,GAAG,cAAc,GAAG,MAAM,EAAE,EAC5D,OAAO,EAAE,CAAC,IAAI,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,EACzC,QAAQ,EAAE,CAAC,IAAI,IAAI,CAAC,mBAAmB,CAAC,CAAC,EAAE,QAAQ,CAAC,GACzD,EAED,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,YAAM,IAAI,EAAC,aAAa,IAAC,YAAM,IAAI,EAAC,sBAAsB,GAAQ,CAAO,CAAC,EAEnG,IAAI,CAAC,aAAa,KAAK,OAAO,IAAI,YAAM,IAAI,EAAC,WAAW,IAAE,IAAI,CAAC,KAAK,CAAQ,CACvE,EAER,YAAM,IAAI,EAAC,SAAS,IAAE,IAAI,CAAC,OAAO,IAAI,WAAK,IAAI,EAAC,SAAS,IAAE,IAAI,CAAC,OAAO,CAAO,CAAQ,EAEtF,YAAM,IAAI,EAAC,QAAQ,IAAE,IAAI,CAAC,MAAM,IAAI,WAAK,IAAI,EAAC,QAAQ,IAAE,IAAI,CAAC,MAAM,CAAO,CAAQ,CAC7E,EACP;KACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/commons/wab-input.css?tag=wab-checkbox-input&encapsulation=shadow","src/components/form-controls/checkbox-input/checkbox-input.css?tag=wab-checkbox-input&encapsulation=shadow","src/components/form-controls/checkbox-input/checkbox-input.tsx"],"sourcesContent":[":host {\n    display: block;\n    font-size: 1em;\n    \n    * {\n        box-sizing: border-box;\n    }\n    \n    [part=\"label\"] {\n        display: block;\n    }\n    \n    [part=\"input\"] {\n        width: 100%;\n        font-size: inherit;\n    }\n    \n    [part=\"details\"] {\n        font-size: .75rem;\n    }\n    \n    [part=\"errors\"] {\n        font-size: .75rem;\n        color: red;\n    }\n    \n}\n",":host {\n  --size: 1rem;\n  --border-color: #ccc;\n  --chcecked-bg-color: transparent;\n  --check-color: #000;\n  --check-size: 50%;\n  --check-width: 3px;\n  --transition-duration: .2s;\n  --transition-ease: ease-in-out;\n  \n  [part=\"label\"] {\n    display: flex;\n    align-items: center;\n  }\n\n  [part=\"input\"]:checked ~ [part=\"customInput\"] {\n    background-color: var(--chcecked-bg-color);\n  }\n  \n  [part=\"input\"]:checked ~ [part=\"customInput\"] [part=\"customInputCheckmark\"] {\n    opacity: 1;\n  }\n  \n  [part=\"customInput\"] {\n    width: var(--size);\n    height: var(--size);\n    border: 1px solid var(--border-color);\n    \n    display: flex;\n    align-items: center;\n    justify-content: center;\n    \n    transition: background-color var(--transition-duration) var(--transition-ease);\n  }\n  \n  [part=\"customInputCheckmark\"] {\n    display: inline-block;\n    width: calc(var(--check-size) / 2);\n    height: var(--check-size);\n    border: solid var(--check-color);\n    border-width: 0 var(--check-width) var(--check-width) 0;\n    transform: rotate(45deg) translate(-10%, -10%);\n    opacity: 0;\n    transition: opacity var(--transition-duration) var(--transition-ease);\n  }\n  \n}\n","import { Host, h, Prop, Event, EventEmitter, Component } from '@stencil/core';\nimport { getComponentId } from '../../../utils/utils';\nimport FormComponentInterface from '../../../interfaces/FormComponentInterface';\n\n@Component({\n  tag: 'wab-checkbox-input',\n  styleUrls: ['../../../commons/wab-input.css', 'checkbox-input.css'],\n  shadow: true,\n})\nexport class CheckboxInput implements FormComponentInterface {\n  @Prop({ mutable: true }) checked: boolean = false;\n  @Prop() value: string;\n  @Prop() disabled: boolean = false;\n  @Prop() readonly: boolean = false;\n  @Prop() name!: string;\n  @Prop() label: string;\n  @Prop() labelPosition: 'left' | 'right' = 'right'\n  @Prop() details: string;\n  @Prop() errors: string;\n  \n  /**\n   * Use the native checkbox html element instead of the custom css one\n   */\n  @Prop() useNative: boolean = false\n  \n  @Event() valueChange: EventEmitter<string>;\n  @Event() valueInput: EventEmitter<string>;\n  \n  get id () {\n    return getComponentId(this.name);\n  }\n  \n  valueChangedHandler (e: InputEvent | Event, eventToEmit?: string) {\n    this.checked = e.target['checked'];\n    \n    if (eventToEmit === 'change') {\n      this.valueChange.emit(e.target['checked']);\n    } else {\n      this.valueInput.emit(e.target['checked']);\n    }\n  }\n  \n  componentWillLoad () {\n    // console.log(this.disabled);\n  }\n  \n  render () {\n    return (\n      <Host class=\"wab-form-control\">\n        <label part=\"label\" >\n          {this.labelPosition === 'left' && <span part='labelText'>{this.label}</span>}\n          \n          <input part=\"input\"\n                 type=\"checkbox\"\n                 checked={this.checked}\n                 id={this.id}\n                 disabled={this.disabled}\n                 value={this.value}\n                 style={{ display: this.useNative ? 'inline-block' : 'none' }}\n                 onInput={e => this.valueChangedHandler(e)}\n                 onChange={e => this.valueChangedHandler(e, 'change')}\n          />\n          \n          {this.useNative ? null : (<span part=\"customInput\"><span part=\"customInputCheckmark\"></span></span>)}\n          \n          {this.labelPosition === 'right' && <span part='labelText'>{this.label}</span>}\n        </label>\n        \n        <slot name='details'>{this.details && <div part='details'>{this.details}</div>}</slot>\n        \n        <slot name='errors'>{this.errors && <div part='errors'>{this.errors}</div>}</slot>\n      </Host>\n    );\n  }\n  \n}\n"],"version":3}