{"version":3,"file":"wab-form-schema.js","sourceRoot":"","sources":["../../../src/components/form-builder/wab-form-schema.ts"],"names":[],"mappings":"","sourcesContent":["import * as yupContent from 'yup';\nimport { ValidationError } from 'yup';\n\nexport interface WabFormSchemaField {\n  id?: string;\n  name: string;\n  label: string;\n  type: string;\n  placeholder?: string;\n  \n  /**\n   * Only for select\n   */\n  options?: string[];\n  value?: any;\n  checked?: any;\n  disabled?: boolean | ((formData: any) => boolean);\n  readonly?: boolean | ((formData: any) => boolean);\n  validators?: (yup, yupSchema: yupContent.Schema) => yupContent.StringSchema;\n  /**\n   * Allow to show or hide the field\n   *\n   * @param formData\n   */\n  conditions?: (formData: any) => boolean;\n  errors?: string;\n  details?: string;\n}\n\nexport interface WabFormSchema {\n  // Options\n  \n  /**\n   * If true, the form will be validated on change event instead on input event\n   */\n  lazy?: boolean;\n  \n  /**\n   * If true, the form will be submitted using ajax instead of the default form submit\n   */\n  useAjax?: boolean;\n  \n  // fields schema\n  fields: WabFormSchemaField[];\n  \n  // Events\n  onBeforeSubmit?: (formData: any) => Promise<void>;\n  onSubmit?: (formData: any) => Promise<void>;\n  onAfterSubmit?: (formData: any) => Promise<void>;\n  onSubmitError?: (formData: any) => Promise<void>;\n  \n  onBeforeReset?: (formData: any) => Promise<void>;\n  onAfterReset?: (formData: any) => Promise<void>;\n  \n  onValidationErrors?: (formData: any, e: ValidationError) => void;\n}\n"]}