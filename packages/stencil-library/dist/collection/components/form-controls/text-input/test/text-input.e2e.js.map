{"version":3,"file":"text-input.e2e.js","sourceRoot":"","sources":["../../../../../src/components/form-controls/text-input/test/text-input.e2e.ts"],"names":[],"mappings":"AAAA,OAAO,EAAuB,UAAU,EAAE,MAAM,uBAAuB,CAAC;AAExE,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,IAAI,IAAa,CAAC;IAClB,IAAI,GAAe,CAAC;IAEpB,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,IAAI,GAAG,MAAM,UAAU,CAAC;YACtB,IAAI,EAAE,mCAAmC;SAC1C,CAAC,CAAC;QACH,GAAG,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;QACxD,MAAM,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAEpC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC;;;;;KAKlC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qBAAqB,EAAE,KAAK,IAAI,EAAE;QACnC,GAAG,CAAC,YAAY,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QAExC,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAC5B,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;QAE1D,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;QACzC,GAAG,CAAC,YAAY,CAAC,SAAS,EAAE,8BAA8B,CAAC,CAAC;QAE5D,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAC5B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,qCAAqC,CAAC,CAAC;QAEvE,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC/B,MAAM,CAAC,OAAO,CAAC,CAAC,WAAW,CAAC,8BAA8B,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;QACpC,GAAG,CAAC,YAAY,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;QAErD,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAC5B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;QAErE,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QAC9B,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,wBAAwB,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { E2EElement, E2EPage, newE2EPage } from '@stencil/core/testing';\n\ndescribe('text-input', () => {\n  let page: E2EPage;\n  let elm: E2EElement;\n  \n  beforeEach(async () => {\n    page = await newE2EPage({\n      html: `<wab-text-input></wab-text-input>`,\n    });\n    elm = await page.find('wab-text-input');\n  });\n  \n  it('renders only the input and default slots', async () => {\n    expect(elm).toHaveClass('hydrated');\n    \n    expect(elm.shadowRoot).toEqualHtml(`\n      <slot name='label'></slot>\n      <input part='input' type='text' id='wab-form-input'>\n      <slot name='details'></slot>\n      <slot name='errors'></slot>\n    `);\n  });\n  \n  it('should have a label', async () => {\n    elm.setAttribute('label', 'Test Label');\n    \n    await page.waitForChanges();\n    const label = await page.find('wab-text-input >>> label');\n    \n    expect(label).not.toBeNull();\n    expect(label).toEqualText('Test Label');\n  });\n  \n  it('should have a description', async () => {\n    elm.setAttribute('details', 'Something to inform the user');\n    \n    await page.waitForChanges();\n    const details = await page.find('wab-text-input >>> [part=\"details\"]');\n    \n    expect(details).not.toBeNull();\n    expect(details).toEqualText('Something to inform the user');\n  });\n  \n  it('should have an error', async () => {\n    elm.setAttribute('errors', 'Something bad happened');\n    \n    await page.waitForChanges();\n    const errors = await page.find('wab-text-input >>> [part=\"errors\"]');\n    \n    expect(errors).not.toBeNull();\n    expect(errors).toEqualText('Something bad happened');\n  });\n});\n\n"]}